import { useEffect, useState } from "react";
import Plot from "react-plotly.js";
import Title from "./components/Title";
import Contexte from "./components/Contexte";
import Explication from "./components/Explications";
import Conclusions from "./components/Conclusions";

export default function SterilizationImpactChart() {
  const [data, setData] = useState(null);
  const [animalType, setAnimalType] = useState(1); // 1 = chiens, 2 = chats
  const [pureFilter, setPureFilter] = useState("all"); // "all", "pure", "mixed"

  useEffect(() => {
    fetch("http://127.0.0.1:8000/api/sterilization_adoption_impact")
      .then((res) => res.json())
      .then(setData);
  }, []);

  if (!data) return <p className="text-center">Chargement du graphique...</p>;

  const filtered = data.filter((d) => {
    if (d.Type !== animalType) return false;
    if (pureFilter === "pure" && d.IsPureBreed !== true) return false;
    if (pureFilter === "mixed" && d.IsPureBreed !== false) return false;
    return true;
  });

  const raceCounts = {};
  filtered.forEach((d) => {
    raceCounts[d.BreedName] = (raceCounts[d.BreedName] || 0) + d.total;
  });

  const topRaces = Object.entries(raceCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .map(([race]) => race);

  const sterilized = filtered.filter(
    (d) => d.Sterilized === 2 && topRaces.includes(d.BreedName)
  );
  const notSterilized = filtered.filter(
    (d) => d.Sterilized === 1 && topRaces.includes(d.BreedName)
  );

  const xLabels = topRaces;

  const getY = (dataset) =>
    xLabels.map((race) => {
      const entry = dataset.find((d) => d.BreedName === race);
      return entry ? entry.adoption_rate : null;
    });

  return (
    <div className="w-full mb-12">
      <Title
        text="Impact de la st√©rilisation sur l‚Äôadoption rapide selon la race"
        number={8}
      />

      {/* Filtres animaux et race pure/mixte */}
      <div className="flex justify-end space-x-2 mb-4">
        <button className="btn" onClick={() => setAnimalType(1)}>
          üê∂ Chiens
        </button>
        <button className="btn" onClick={() => setAnimalType(2)}>
          üê± Chats
        </button>
      </div>
      <div className="flex justify-end space-x-2 mb-6">
        <button className="btn" onClick={() => setPureFilter("all")}>
          Toutes les races
        </button>
        <button className="btn" onClick={() => setPureFilter("pure")}>
          Races pures
        </button>
        <button className="btn" onClick={() => setPureFilter("mixed")}>
          Races mixtes
        </button>
      </div>

      {/* Graphique Plotly */}
      <Plot
        data={[
          {
            x: xLabels,
            y: getY(sterilized),
            name: "St√©rilis√©s",
            type: "bar",
            marker: { color: "#34D399" },
            hovertemplate: "%{y}% adopt√©s rapidement<br>%{x}<extra></extra>",
          },
          {
            x: xLabels,
            y: getY(notSterilized),
            name: "Non st√©rilis√©s",
            type: "bar",
            marker: { color: "#F87171" },
            hovertemplate: "%{y}% adopt√©s rapidement<br>%{x}<extra></extra>",
          },
        ]}
        layout={{
          barmode: "group",
          xaxis: {
            title: { text: "Race", font: { size: 16 } },
            tickangle: -45,
            tickfont: { size: 12 },
          },
          yaxis: {
            title: { text: "% d'adoption rapide", font: { size: 16 } },
            tickfont: { size: 14 },
            range: [0, 100],
          },
          legend: {
            font: { size: 14 },
            orientation: "h",
            y: -0.3,
          },
          height: 500,
          margin: { t: 40, b: 100, l: 60, r: 30 },
          plot_bgcolor: "#ffffff",
          paper_bgcolor: "#ffffff",
          font: { family: "Inter, sans-serif" },
        }}
        config={{ responsive: true, displayModeBar: true, displaylogo: false }}
        style={{ width: "100%", height: "600px", marginBottom: "30px" }}
      />

      <Contexte texte="Ce graphique compare le pourcentage d'adoption rapide des animaux st√©rilis√©s et non st√©rilis√©s pour les 10 races les plus fr√©quentes. Vous pouvez filtrer les r√©sultats par type d‚Äôanimal et par puret√© de race." />

      {/* Explications et conclusions (inchang√©es) */}
      <Explication
        title="Analyse comportementale et perception"
        points={[
          "Un levier comportemental et sanitaire : la st√©rilisation est per√ßue positivement par les adoptants, car elle est souvent associ√©e √† un animal plus calme, moins agressif, et avec un risque r√©duit de fugue ou de reproduction non contr√¥l√©e.",
          "Effet renforc√© sur certaines races populaires : chez des races comme le Golden Retriever, le Poodle ou le Schnauzer, d√©j√† tr√®s pris√©es, la st√©rilisation semble booster leur attractivit√©.",
          "La st√©rilisation comme marqueur de soin : elle renforce l‚Äôimage d‚Äôun animal pr√©par√©, ce qui valorise sa fiche en refuge.",
        ]}
      />

      <Explication
        title="Limites et nuances selon les races"
        points={[
          "Certaines races comme le Bull Terrier ne profitent pas de la st√©rilisation dans l‚Äô√©chantillon observ√©.",
          "Chez des races comme le Jack Russell Terrier, les traits comportementaux dominants peuvent neutraliser l‚Äôeffet de la st√©rilisation.",
          "Pour les races d√©j√† tr√®s pris√©es (Corgis, Pugs), la st√©rilisation n‚Äôapporte pas forc√©ment d‚Äôeffet suppl√©mentaire.",
        ]}
      />

      <Conclusions
        conclusions={[
          "La st√©rilisation joue un r√¥le positif sur la perception des animaux par les adoptants.",
          "Elle influence particuli√®rement les races per√ßues comme √©quilibr√©es ou faciles √† vivre.",
          "Son impact d√©pend aussi du type de race (pure ou mixte) et de l‚Äôimage associ√©e.",
        ]}
      />
    </div>
  );
}
