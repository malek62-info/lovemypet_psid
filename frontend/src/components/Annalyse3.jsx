import { useEffect, useState } from "react";
// import {
//   BarChart,
//   Bar,
//   XAxis,
//   YAxis,
//   CartesianGrid,
//   Tooltip,
//   ResponsiveContainer,
//   Legend,
//   LabelList,
// } from "recharts";
import Plot from "react-plotly.js";
import Conclusions from "./Conclusions";
import Title from "./Title";
import Explication from "./Explications";
import Contexte from "./Contexte";

const Annalyse3 = () => {
  // √âtats pour stocker les donn√©es des diff√©rents graphiques
  const [stackedDataDog, setStackedDataDog] = useState([]);
  const [stackedDataCat, setStackedDataCat] = useState([]);
  const [sterilizationDataDog, setSterilizationDataDog] = useState([]);
  const [sterilizationDataCat, setSterilizationDataCat] = useState([]);
  const [sterilizationPercentDataDog, setSterilizationPercentDataDog] =
    useState([]);
  const [sterilizationPercentDataCat, setSterilizationPercentDataCat] =
    useState([]);
  const [adoptionSpeedDataDog, setAdoptionSpeedDataDog] = useState([]);
  const [adoptionSpeedDataCat, setAdoptionSpeedDataCat] = useState([]);
  const [lineDataDog, setLineDataDog] = useState({ male: {}, female: {} });
  const [lineDataCat, setLineDataCat] = useState({ male: {}, female: {} });
  const [loading, setLoading] = useState(false);
  const [showNonSterilized, setShowNonSterilized] = useState(true);
  const [showMalesSterilization, setShowMalesSterilization] = useState(true);
  const [showFemalesSterilization, setShowFemalesSterilization] =
    useState(true);
  const [view, setView] = useState("dog");
  const [sterilizationAnimal, setSterilizationAnimal] = useState("dog");
  const [adoptionSpeedAnimal, setAdoptionSpeedAnimal] = useState("dog");
  const [showMalesAdoption, setShowMalesAdoption] = useState(true);
  const [showFemalesAdoption, setShowFemalesAdoption] = useState(true);
  const [lineAnimal, setLineAnimal] = useState("dog");

  // Labels pour les vitesses d'adoption
  const adoptionSpeedLabels = {
    0: "Adopt√© le jour m√™me",
    1: "Adopt√© en 1-7 jours",
    2: "Adopt√© en 8-30 jours",
    3: "Adopt√© en 31-90 jours",
    4: "Non adopt√© apr√®s 100 jours",
  };

  // Couleurs distinctes pour chaque vitesse d'adoption (m√¢les et femelles)
  const maleColors = [
    "#2ecc71", // Vert √©meraude (speed 0)
    "#3498db", // Bleu ciel (speed 1)
    "#9b59b6", // Violet (speed 2)
    "#e74c3c", // Rouge (speed 3)
    "#f1c40f", // Jaune (speed 4)
  ];
  const femaleColors = [
    "#e91e63", // Rose fuchsia (speed 0)
    "#1abc9c", // Turquoise (speed 1)
    "#8e44ad", // Violet fonc√© (speed 2)
    "#d35400", // Orange citrouille (speed 3)
    "#34495e", // Gris bleu fonc√© (speed 4)
  ];

  // Fonction pour r√©cup√©rer les donn√©es du graphique √† barres empil√©es
  const fetchStackedBarData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/stacked-bar/${animal}`
      );
      const result = await response.json();
      if (result.stacked_data) {
        const categoryMapping = {
          MaturitySize_1: "Taille √† maturit√© - Petite (1)",
          MaturitySize_2: "Taille √† maturit√© - Moyenne (2)",
          MaturitySize_3: "Taille √† maturit√© - Grande (3)",
          Gender_1: "Sexe - M√¢le (1)",
          Gender_2: "Sexe - Femelle (2)",
          Gender_3: "Sexe - Mixte (3)",
          FurLength_1: "Longueur de la fourrure - Court (1)",
          FurLength_2: "Longueur de la fourrure - Moyen (2)",
          FurLength_3: "Longueur de la fourrure - Long (3)",
          Vaccinated_1: "Vaccin√© - Oui (1)",
          Vaccinated_2: "Vaccin√© - Non (2)",
          Dewormed_1: "Vermifug√© - Oui (1)",
          Dewormed_2: "Vermifug√© - Non (2)",
          Sterilized_1: "St√©rilis√© - Oui (1)",
          Sterilized_2: "St√©rilis√© - Non (2)",
          Health_1: "Sant√© - En bonne sant√© (1)",
          Health_2: "Sant√© - Blessure mineure (2)",
        };
        const filteredData = result.stacked_data.map((entry) => ({
          ...entry,
          category: categoryMapping[entry.category] || entry.category,
          AdoptedSameDay: entry.speed_0,
          AdoptedWithin7Days: entry.speed_1,
          AdoptedWithin1Month: entry.speed_2,
        }));
        setData(filteredData);
      }
    } catch (error) {
      console.error("Erreur API Stacked Bar :", error);
    }
  };

  // Fonction pour r√©cup√©rer les donn√©es de st√©rilisation par sexe
  const fetchSterilizationData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/sterilization-by-gender/${animal}`
      );
      const result = await response.json();
      if (result.data) {
        const categoryMapping = {
          Gender_1: "Sexe - M√¢le (1)",
          Gender_2: "Sexe - Femelle (2)",
          Gender_3: "Sexe - Mixte (3)",
        };
        const transformedData = result.data.map((entry) => ({
          ...entry,
          Gender: categoryMapping[entry.Gender] || entry.Gender,
        }));
        setData(transformedData);
      }
    } catch (error) {
      console.error("Erreur API Sterilization Data :", error);
    }
  };

  // Fonction pour r√©cup√©rer les donn√©es de pourcentage de st√©rilisation par √¢ge
  const fetchSterilizationPercentData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/sterilization-percent-by-age/${animal}`
      );
      const result = await response.json();
      if (result.data) {
        setData(result.data);
      }
    } catch (error) {
      console.error("Erreur API Sterilization Percent Data :", error);
    }
  };

  // Fonction pour r√©cup√©rer les donn√©es du graphique en lignes (adoptions par intervalle d'√¢ge)
  const fetchAdoptionSpeedLine = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/adoption-speed-density/${animal}`
      );
      const result = await response.json();
      if (result.line_data) {
        setData(result.line_data);
      }
    } catch (error) {
      console.error("Erreur API Line Data :", error);
    }
  };

  // Chargement des donn√©es au montage du composant
  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      await Promise.all([
        fetchStackedBarData(1, setStackedDataDog),
        fetchStackedBarData(2, setStackedDataCat),
        fetchSterilizationData(1, setSterilizationDataDog),
        fetchSterilizationData(2, setSterilizationDataCat),
        fetchSterilizationPercentData(1, setSterilizationPercentDataDog),
        fetchSterilizationPercentData(2, setSterilizationPercentDataCat),
        fetchAdoptionSpeedLine(1, setLineDataDog),
        fetchAdoptionSpeedLine(2, setLineDataCat),
      ]);
      setLoading(false);
    };
    loadData();
  }, []);

  const renderLabel = (value) => value;

  // S√©lection des donn√©es en fonction des filtres
  const stackedData = view === "dog" ? stackedDataDog : stackedDataCat;
  const sterilizationData =
    sterilizationAnimal === "dog" ? sterilizationDataDog : sterilizationDataCat;
  const sterilizationPercentData =
    sterilizationAnimal === "dog"
      ? sterilizationPercentDataDog
      : sterilizationPercentDataCat;
  const adoptionSpeedData =
    adoptionSpeedAnimal === "dog" ? adoptionSpeedDataDog : adoptionSpeedDataCat;
  const adoptionSpeedTitle =
    adoptionSpeedAnimal === "dog" ? "Chiens üê∂" : "Chats üê±";
  const lineData = lineAnimal === "dog" ? lineDataDog : lineDataCat;
  const lineTitle = lineAnimal === "dog" ? "Chiens üê∂" : "Chats üê±";

  return (
    <div className="">
      <>
        <Title text="Titre du graphe ?" number={3} />
        {/* Graphique 1 : Vitesse d'adoption par variable */}
        <div className="w-full mb-12">
          <div className="flex  justify-end space-x-2">
            <button className="btn" onClick={() => setView("dog")}>
              üê∂ Chiens
            </button>
            <button className="btn " onClick={() => setView("cat")}>
              üê± Chats
            </button>
          </div>

          {/* <ResponsiveContainer height={600}>
                <BarChart
                  data={stackedData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 120 }}
                >
                  <CartesianGrid stroke="#d1d5db" strokeDasharray="3 3" />
                  <XAxis
                    dataKey="category"
                    tick={{ fontSize: 12 }}
                    angle={-45}
                    textAnchor="end"
                  />
                  <YAxis tick={{ fontSize: 12 }} />
                  <Tooltip />
                  <Legend />
                  <Bar
                    dataKey="AdoptedSameDay"
                    stackId="a"
                    fill="#1f77b4"
                    name="Adopt√© le jour m√™me"
                  >
                    <LabelList
                      dataKey="AdoptedSameDay"
                      position="center"
                      fill="white"
                      fontSize={16}
                      fontWeight="bold"
                      formatter={renderLabel}
                    />
                  </Bar>
                  <Bar
                    dataKey="AdoptedWithin7Days"
                    stackId="a"
                    fill="#ff7f0e"
                    name="Adopt√© sous 1 √† 7 jours"
                  >
                    <LabelList
                      dataKey="AdoptedWithin7Days"
                      position="center"
                      fill="white"
                      fontSize={16}
                      fontWeight="bold"
                      formatter={renderLabel}
                    />
                  </Bar>
                  <Bar
                    dataKey="AdoptedWithin1Month"
                    stackId="a"
                    fill="#2ca02c"
                    name="Adopt√© en 8 √† 30 jours"
                  >
                    <LabelList
                      dataKey="AdoptedWithin1Month"
                      position="center"
                      fill="white"
                      fontSize={16}
                      fontWeight="bold"
                      formatter={renderLabel}
                    />
                  </Bar>
                </BarChart>
              </ResponsiveContainer> */}

          <Plot
            data={[
              {
                x: stackedData.map((d) => d.category),
                y: stackedData.map((d) => d.AdoptedSameDay),
                type: "bar",
                name: "Adopt√© le jour m√™me",
                marker: { color: "#1f77b4" },
              },
              {
                x: stackedData.map((d) => d.category),
                y: stackedData.map((d) => d.AdoptedWithin7Days),
                type: "bar",
                name: "Adopt√© sous 1 √† 7 jours",
                marker: { color: "#ff7f0e" },
              },
              {
                x: stackedData.map((d) => d.category),
                y: stackedData.map((d) => d.AdoptedWithin1Month),
                type: "bar",
                name: "Adopt√© en 8 √† 30 jours",
                marker: { color: "#2ca02c" },
              },
            ]}
            layout={{
              barmode: "stack",
            }}
            style={{ width: "100%", height: "600px", marginBottom: "30px" }}
          />

          <Contexte
            texte="  Le graphique pr√©sente la r√©partition des adoptions de chiens en
                fonction de plusieurs crit√®res : longueur de la fourrure,
                vaccination, vermifugation, st√©rilisation, √©tat de sant√©, sexe
                et taille √† maturit√©. Les adoptions sont class√©es en trois
                cat√©gories"
          />

          <Explication
            title="Distribution G√©n√©rale"
            points={[
              "Adopt√© le jour m√™me (barres bleues)",
              "Adopt√© sous 1 √† 7 jours (barres oranges)",
              "Adopt√© en 8 √† 30 jours (barres vertes)",
            ]}
          />

          <Contexte
            texte=" Globalement, on constate que la majorit√© des chiens sont adopt√©s
                dans la premi√®re semaine suivant leur mise √† l'adoption (barres
                oranges), tandis que les adoptions imm√©diates et celles prenant
                plus de 8 jours sont moins fr√©quentes."
          />

          <Explication
            title="Facteurs Influant sur la Vitesse d'Adoption (Chiens)"
            points={[
              "√âtat de sant√© : Les chiens en bonne sant√© sont adopt√©s plus rapidement, confirmant que les adoptants privil√©gient les animaux qui semblent en pleine forme.",
              "St√©rilisation : Les chiens non st√©rilis√©s connaissent un taux d'adoption plus rapide. Cela pourrait s'expliquer par leur jeune √¢ge ou par une pr√©f√©rence des adoptants pour des animaux reproductibles.",
              "Vermifugation : Les chiens vermifug√©s semblent √™tre adopt√©s plus rapidement, ce qui peut refl√©ter une pr√©f√©rence pour les animaux b√©n√©ficiant d√©j√† de soins pr√©ventifs.",
              "Taille √† maturit√© : Les chiens de taille moyenne sont adopt√©s plus rapidement que ceux de petite ou grande taille.",
              "Vaccination : Contrairement aux attentes, la vaccination ne semble pas avoir d'impact majeur sur la vitesse d'adoption, car la diff√©rence entre les chiens vaccin√©s et non vaccin√©s est minime.",
            ]}
          />

          <Explication
            title="Facteurs Influant sur l'Adoption (Chats)"
            points={[
              "Distribution G√©n√©rale : Comme observ√© chez les chiens, la majorit√© des adoptions de chats ont lieu dans la premi√®re semaine suivant leur mise √† l'adoption (barres oranges), suivies par les adoptions plus tardives (barres vertes) et celles effectu√©es le jour m√™me (barres bleues).",
              "Facteurs de Sant√© : Les facteurs li√©s √† la sant√©, tels que la vaccination, la vermifugation et l'√©tat g√©n√©ral de l'animal, semblent jouer un r√¥le d√©terminant dans la rapidit√© d'adoption, comme c'√©tait le cas pour les chiens.",
              "√âtat de sant√© et st√©rilisation : Les chats en bonne sant√© et non st√©rilis√©s sont adopt√©s plus rapidement. En revanche, ceux pr√©sentant des probl√®mes de sant√© ou √©tant d√©j√† st√©rilis√©s ont un taux d'adoption nettement plus faible. Cela pourrait s'expliquer par une pr√©f√©rence pour les jeunes animaux ou par l'intention des adoptants de g√©rer eux-m√™mes la st√©rilisation.",
              "Vaccination : Contrairement aux chiens, la vaccination semble jouer un r√¥le cl√© dans l'adoption des chats. Les chats vaccin√©s ont tendance √† √™tre adopt√©s plus rapidement, ce qui pourrait refl√©ter une perception des adoptants selon laquelle un chat vaccin√© est plus s√©curis√© sur le plan sanitaire.",
              "Taille √† maturit√© : Contrairement aux chiens, la taille ne semble pas √™tre un facteur d√©terminant dans l'adoption des chats, leur gabarit √©tant plus uniforme.",
            ]}
          />

          <Explication
            title="Analyse des Chats et Comparaison avec les Chiens"
            points={[
              "Distribution G√©n√©rale : Comme observ√© chez les chiens, la majorit√© des adoptions de chats ont lieu dans la premi√®re semaine suivant leur mise √† l'adoption (barres oranges), suivies par les adoptions plus tardives (barres vertes) et celles effectu√©es le jour m√™me (barres bleues).",
              "Facteurs de Sant√© : Les facteurs li√©s √† la sant√©, tels que la vaccination, la vermifugation et l'√©tat g√©n√©ral de l'animal, semblent jouer un r√¥le d√©terminant dans la rapidit√© d'adoption, comme c'√©tait le cas pour les chiens.",
              "√âtat de sant√© et st√©rilisation : Les chats en bonne sant√© et non st√©rilis√©s sont adopt√©s plus rapidement. En revanche, ceux pr√©sentant des probl√®mes de sant√© ou √©tant d√©j√† st√©rilis√©s ont un taux d'adoption nettement plus faible. Cela pourrait s'expliquer par une pr√©f√©rence pour les jeunes animaux ou par l'intention des adoptants de g√©rer eux-m√™mes la st√©rilisation.",
              "Vaccination : Contrairement aux chiens, la vaccination semble jouer un r√¥le cl√© dans l'adoption des chats. Les chats vaccin√©s ont tendance √† √™tre adopt√©s plus rapidement, ce qui pourrait refl√©ter une perception des adoptants selon laquelle un chat vaccin√© est plus s√©curis√© sur le plan sanitaire.",
              "Taille √† maturit√© : Contrairement aux chiens, la taille ne semble pas √™tre un facteur d√©terminant dans l'adoption des chats, leur gabarit √©tant plus uniforme.",
              "Vitesse G√©n√©rale d'Adoption : Chez les chiens comme les chats, la majorit√© des adoptions se font entre 1 et 7 jours apr√®s la mise √† l'adoption. Les adoptions imm√©diates (jour m√™me) et tardives (8 √† 30 jours) sont moins fr√©quentes, sugg√©rant que les adoptants prennent g√©n√©ralement quelques jours pour r√©fl√©chir avant de choisir un animal.",
              "Influence de l'√âtat de Sant√© : Les chiens et chats en bonne sant√© sont adopt√©s plus rapidement, confirmant que les adoptants privil√©gient les animaux sans probl√®mes m√©dicaux visibles.",
              "Impact de la St√©rilisation : Les chiens et chats non st√©rilis√©s sont adopt√©s plus vite que ceux qui le sont, probablement car ils sont souvent plus jeunes et que certains adoptants pr√©f√®rent g√©rer eux-m√™mes la st√©rilisation. Cette diff√©rence est plus marqu√©e chez les chats.",
              "R√¥le de la Vaccination : La vaccination est essentielle pour l‚Äôadoption des chats mais joue un r√¥le secondaire chez les chiens. Les adoptants semblent consid√©rer les chats comme plus vuln√©rables aux maladies.",
              "Importance de la Taille : Les chiens de taille moyenne sont privil√©gi√©s (contraintes d‚Äôespace), alors que la taille n‚Äôa presque pas d‚Äôimpact sur l‚Äôadoption des chats, leur gabarit √©tant plus uniforme.",
              "Effet de la Vermifugation : Dans les deux cas, les animaux vermifug√©s sont adopt√©s plus rapidement, montrant que les adoptants valorisent les soins pr√©ventifs.",
            ]}
          />

          <Conclusions
            conclusions={[
              " Les facteurs de sant√© et de soins pr√©ventifs influencent diff√©remment chiens et chats. La vaccination est cruciale pourles chats mais secondaire pour les chiens, tandis que la taille compte surtout pour les chiens. La non-st√©rilisation acc√©l√®re l'adoption dans les deux cas.",
            ]}
          />
        </div>

        {/* Graphique 2 : St√©rilisation */}
        <div className="">
          <Title
            text="Analyse de la st√©rilisation des animaux selon le sexe et l'√¢ge"
            number={3}
          />

          {/* Boutons de filtre */}
          <div className="flex justify-end">
            <div className="mb-8 flex space-x-3">
              <button
                className="btn"
                onClick={() => setSterilizationAnimal("dog")}
              >
                üê∂ Chiens
              </button>
              <button
                className="btn"
                onClick={() => setSterilizationAnimal("cat")}
              >
                üê± Chats
              </button>
            </div>
          </div>

          {/* Grille des graphiques */}
          <div className=" flex ">
            {/* Graphique 1 - Nombre total */}
            <div className="w-1/2">
              <div className="flex items-center text-lg">
                <input
                  type="checkbox"
                  className="checkbox checkbox-primary"
                  checked={showNonSterilized}
                  onChange={() => setShowNonSterilized(!showNonSterilized)}
                />

                <span className="ml-2">
                  {" "}
                  Afficher les animaux non st√©rilis√©s
                </span>
              </div>

              <div className="">
                <Plot
                  data={[
                    {
                      x: sterilizationData.map((d) => d.Gender),
                      y: sterilizationData.map((d) => d.Sterilized_Yes),
                      type: "bar",
                      name: "St√©rilis√© - Oui (1)",
                      marker: { color: "#4CAF50" },
                      width: 0.6,
                    },
                    ...(showNonSterilized
                      ? [
                          {
                            x: sterilizationData.map((d) => d.Gender),
                            y: sterilizationData.map((d) => d.Sterilized_No),
                            type: "bar",
                            name: "St√©rilis√© - Non (2)",
                            marker: { color: "#F44336" },
                            width: 0.6,
                          },
                        ]
                      : []),
                  ]}
                  layout={{
                    height: 500,
                    xaxis: {
                      title: { text: "Sexe", font: { size: 16 } },
                      tickfont: { size: 14 },
                    },
                    yaxis: {
                      title: { text: "Nombre d'animaux", font: { size: 16 } },
                      tickfont: { size: 14 },
                    },
                    barmode: "group",
                    legend: {
                      font: { size: 14 },
                      orientation: "h",
                      y: 1.1,
                    },
                    margin: { l: 80, r: 50, t: 30, b: 80 },
                    plot_bgcolor: "#f8fafc",
                    paper_bgcolor: "#ffffff",
                  }}
                  config={{
                    responsive: true,
                    displayModeBar: true,
                    displaylogo: false,
                  }}
                />
              </div>
            </div>

            {/* Graphique 2 - Pourcentage par √¢ge */}
            <div className="w-1/2">
              <div className="mb-6 flex space-x-8">
                <div className="flex items-center text-lg">
                  <input
                    type="checkbox"
                    className="checkbox checkbox-primary"
                    checked={showMalesSterilization}
                    onChange={() =>
                      setShowMalesSterilization(!showMalesSterilization)
                    }
                  />

                  <span className="ml-2">Afficher les m√¢les</span>
                </div>

                <div className="flex items-center text-lg">
                  <input
                    type="checkbox"
                    className="checkbox checkbox-primary"
                    checked={showFemalesSterilization}
                    onChange={() =>
                      setShowFemalesSterilization(!showFemalesSterilization)
                    }
                  />

                  <span className="ml-2">Afficher les femelles</span>
                </div>
              </div>
              <div className="w-full h-[500px]">
                <Plot
                  data={[
                    ...(showMalesSterilization
                      ? [
                          {
                            x: sterilizationPercentData.map((d) => d.Age),
                            y: sterilizationPercentData.map(
                              (d) => d.Male_Sterilization_Percent
                            ),
                            type: "scatter",
                            mode: "lines+markers",
                            name: "Sexe - M√¢le (1)",
                            line: { color: "#2196F3", width: 3 },
                            marker: { size: 10, color: "#2196F3" },
                          },
                        ]
                      : []),
                    ...(showFemalesSterilization
                      ? [
                          {
                            x: sterilizationPercentData.map((d) => d.Age),
                            y: sterilizationPercentData.map(
                              (d) => d.Female_Sterilization_Percent
                            ),
                            type: "scatter",
                            mode: "lines+markers",
                            name: "Sexe - Femelle (2)",
                            line: { color: "#FF9800", width: 3 },
                            marker: { size: 10, color: "#FF9800" },
                          },
                        ]
                      : []),
                  ]}
                  layout={{
                    height: 500,
                    xaxis: {
                      title: { text: "√Çge", font: { size: 16 } },
                      tickfont: { size: 14 },
                    },
                    yaxis: {
                      title: {
                        text: "Pourcentage de st√©rilisation (%)",
                        font: { size: 16 },
                      },
                      tickfont: { size: 14 },
                      range: [0, 100],
                    },
                    legend: {
                      font: { size: 14 },
                      orientation: "h",
                      y: 1.1,
                    },
                    margin: { l: 80, r: 50, t: 30, b: 80 },
                    plot_bgcolor: "#f8fafc",
                    paper_bgcolor: "#ffffff",
                    hovermode: "closest",
                  }}
                  config={{
                    responsive: true,
                    displayModeBar: true,
                    displaylogo: false,
                  }}
                />
              </div>
            </div>
          </div>
        </div>

        <Contexte texte="Les graphiques pr√©sentent des donn√©es sur la st√©rilisation des animaux (chiens et chats), diff√©renci√©es selon le sexe et l'√¢ge. L'objectif est de comprendre les tendances g√©n√©rales de st√©rilisation et d'identifier d'√©ventuelles diff√©rences entre les groupes." />

        <Explication
          title="1. St√©rilisation chez les chiens"
          points={[
            "Le premier graphique montre le nombre total d'animaux st√©rilis√©s ou non, selon le sexe.",
            "Pr√©dominance des non-st√©rilis√©s : Les animaux non st√©rilis√©s (barres rouges) sont plus nombreux que les st√©rilis√©s (barres vertes).",
            "R√©partition par sexe : Les femelles semblent plus nombreuses que les m√¢les, et le groupe mixte est minoritaire.",
            "Le deuxi√®me graphique illustre le pourcentage de st√©rilisation par √¢ge et par sexe.",
            "Corr√©lation avec l'√¢ge : Le taux de st√©rilisation augmente significativement avec l'√¢ge (jeunes rarement st√©rilis√©s vs adultes/seniors).",
            "Diff√©rence entre sexes : La tendance est plus marqu√©e chez les femelles, refl√©tant une plus forte incitation √† leur st√©rilisation.",
          ]}
        />

        <Explication
          title="2. St√©rilisation chez les chats"
          points={[
            "Comme chez les chiens, les non-st√©rilis√©s sont majoritaires.",
            "√âquilibre entre sexes : La diff√©rence est moins marqu√©e que chez les chiens, sugg√©rant une approche plus √©quilibr√©e.",
            "Augmentation similaire √† celle observ√©e chez les chiens, mais taux plus √©lev√© chez les adultes.",
            "Chez les seniors, la diff√©rence entre m√¢les et femelles est moins prononc√©e que chez les chiens.",
          ]}
        />

        {/* Section Comparaison entre chiens et chats */}
        <Explication
          title="Comparaison entre chiens et chats"
          points={[
            "Chats plus st√©rilis√©s : Probablement d√ª √† la n√©cessit√© de contr√¥ler les populations de chats errants.",
            "Priorit√© aux femelles canines : La st√©rilisation des chiennes semble plus cibl√©e que celle des m√¢les.",
            "Jeunes rarement st√©rilis√©s : Constat commun aux deux esp√®ces.",
            "Progression diff√©rente : Plus graduelle chez les chiens, alors que les chats atteignent rapidement un taux √©lev√©.",
          ]}
        />

        {/* Section Interpr√©tation et recommandations */}
        <Explication
          title="Interpr√©tation et recommandations"
          points={[
            "St√©rilisation pr√©coce : Sensibiliser √† une intervention plus pr√©coce, surtout chez les chiens, pour limiter la reproduction incontr√¥l√©e.",
            "√âquilibre entre sexes : Promouvoir la st√©rilisation des m√¢les canins pour un contr√¥le plus efficace des populations.",
            "Mod√®le f√©lin : S'inspirer de l'approche √©quilibr√©e observ√©e chez les chats pour les chiens.",
          ]}
        />

        <Conclusions
          conclusions={[
            "Ces analyses mettent en lumi√®re des tendances et des √©carts qui pourraient √™tre optimis√©s par des campagnes de sensibilisation et des politiques de st√©rilisation adapt√©es √† chaque esp√®ce et groupe d'√¢ge.",
          ]}
        />

        <Title text="Nombre d'Adoptions par Intervalle d'√Çge " number={3} />

        {/* Graphique 4 : Lignes simples avec intervalles d'√¢ge et couleurs diff√©rentes */}
        <div className="w-full mb-12">
          <h2 className=" mb-4 text-xl">Pour {lineTitle}</h2>

          <div className="flex justify-between">
            <div className="flex space-x-3">
              <button className="btn" onClick={() => setLineAnimal("dog")}>
                üê∂ Chiens
              </button>
              <button className="btn" onClick={() => setLineAnimal("cat")}>
                üê± Chats
              </button>
            </div>
            <div className="flex space-x-3">
              <div className="flex items-center text-lg">
                <input
                  type="checkbox"
                  className="checkbox checkbox-primary"
                  checked={showMalesAdoption}
                  onChange={() => setShowMalesAdoption(!showMalesAdoption)}
                />

                <span className="ml-2"> M√¢les </span>
              </div>

              <div className="flex items-center text-lg">
                <input
                  type="checkbox"
                  className="checkbox checkbox-primary"
                  checked={showFemalesAdoption}
                  onChange={() => setShowFemalesAdoption(!showFemalesAdoption)}
                />

                <span className="ml-2"> Femelles </span>
              </div>
            </div>
          </div>
          <div className="">
       
            <Plot
              data={[
                ...(showMalesAdoption
                  ? Object.entries(lineData.male).map(
                      ([speed, data], index) => ({
                        x: data.x,
                        y: data.y,
                        type: "scatter",
                        mode: "lines+markers",
                        name: `${adoptionSpeedLabels[speed]} (M√¢le)`,
                        line: { color: maleColors[index], width: 2 },
                        marker: { size: 8, color: maleColors[index] },
                      })
                    )
                  : []),
                ...(showFemalesAdoption
                  ? Object.entries(lineData.female).map(
                      ([speed, data], index) => ({
                        x: data.x,
                        y: data.y,
                        type: "scatter",
                        mode: "lines+markers",
                        name: `${adoptionSpeedLabels[speed]} (Femelle)`,
                        line: { color: femaleColors[index], width: 2 },
                        marker: { size: 8, color: femaleColors[index] },
                      })
                    )
                  : []),
              ]}
              layout={{
          
                xaxis: {
                  title: "Intervalles d'√¢ge",
                  tickangle: -45,
                  automargin: true,
                },
                yaxis: {
                  title: "Nombre d'adoptions",
                },
                showlegend: true,
             
              }}
              config={{
                displayModeBar: true,
                displaylogo: false,
              }}

              style={{ width: "100%", height: "600px", marginBottom: "30px" }}
            />
          </div>
        </div>
      </>
    </div>
  );
};

export default Annalyse3;
