import { useEffect, useState } from "react";
import Plot from "react-plotly.js";
import Conclusions from "./Conclusions";
import Title from "./Title";
import Explication from "./Explications";
import Contexte from "./Contexte";

const Anna7 = () => {
  // √âtats pour stocker les donn√©es des diff√©rents graphiques
  const [stackedDataDog, setStackedDataDog] = useState([]);
  const [stackedDataCat, setStackedDataCat] = useState([]);
  const [sterilizationDataDog, setSterilizationDataDog] = useState([]);
  const [sterilizationDataCat, setSterilizationDataCat] = useState([]);
  const [sterilizationPercentDataDog, setSterilizationPercentDataDog] =
    useState([]);
  const [sterilizationPercentDataCat, setSterilizationPercentDataCat] =
    useState([]);
  const [loading, setLoading] = useState(false);
  const [showNonSterilized, setShowNonSterilized] = useState(true);
  const [showMalesSterilization, setShowMalesSterilization] = useState(true);
  const [showFemalesSterilization, setShowFemalesSterilization] =
    useState(true);
  const [view, setView] = useState("dog");
  const [sterilizationAnimal, setSterilizationAnimal] = useState("dog");

  // Nouvel √©tat pour les donn√©es des top races
  const [topBreedsDataDog, setTopBreedsDataDog] = useState([]);
  const [topBreedsDataCat, setTopBreedsDataCat] = useState([]);
  const [topBreedsAnimal, setTopBreedsAnimal] = useState("dog");

  // Labels pour les vitesses d'adoption
  const adoptionSpeedLabels = {
    0: "Adopt√© le jour m√™me",
    1: "Adopt√© en 1-7 jours",
    2: "Adopt√© en 8-30 jours",
    3: "Adopt√© en 31-90 jours",
    4: "Non adopt√© apr√®s 100 jours",
  };

  // Fonction pour r√©cup√©rer les donn√©es du graphique √† barres empil√©es
  const fetchStackedBarData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/stacked-bar/${animal}`
      );
      const result = await response.json();
      if (result.stacked_data) {
        const categoryMapping = {
          MaturitySize_1: "Taille √† maturit√© - Petite",
          MaturitySize_2: "Taille √† maturit√© - Moyenne",
          MaturitySize_3: "Taille √† maturit√© - Grande",
          Gender_1: "Sexe - M√¢le",
          Gender_2: "Sexe - Femelle",
          Gender_3: "Sexe - Mixte",
          FurLength_1: "Longueur de la fourrure - Court",
          FurLength_2: "Longueur de la fourrure - Moyen",
          FurLength_3: "Longueur de la fourrure - Long",
          Vaccinated_1: "Vaccin√© - Oui",
          Vaccinated_2: "Vaccin√© - Non",
          Dewormed_1: "Vermifug√© - Oui",
          Dewormed_2: "Vermifug√© - Non",
          Sterilized_1: "St√©rilis√© - Oui",
          Sterilized_2: "St√©rilis√© - Non",
          Health_1: "Sant√© - En bonne sant√©",
          Health_2: "Sant√© - Blessure mineure",
        };
        const filteredData = result.stacked_data.map((entry) => ({
          ...entry,
          category: categoryMapping[entry.category] || entry.category,
          AdoptedSameDay: entry.speed_0,
          AdoptedWithin7Days: entry.speed_1,
          AdoptedWithin1Month: entry.speed_2,
        }));
        setData(filteredData);
      }
    } catch (error) {
      console.error("Erreur API Stacked Bar :", error);
    }
  };

  // Fonction pour r√©cup√©rer les donn√©es de st√©rilisation par sexe
  const fetchSterilizationData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/sterilization-by-gender/${animal}`
      );
      const result = await response.json();
      if (result.data) {
        const categoryMapping = {
          Gender_1: "Sexe - M√¢le",
          Gender_2: "Sexe - Femelle",
          Gender_3: "Sexe - Mixte",
        };
        const transformedData = result.data.map((entry) => ({
          ...entry,
          Gender: categoryMapping[entry.Gender] || entry.Gender,
        }));
        setData(transformedData);
      }
    } catch (error) {
      console.error("Erreur API Sterilization Data :", error);
    }
  };

  // Fonction pour r√©cup√©rer les donn√©es de pourcentage de st√©rilisation par √¢ge
  const fetchSterilizationPercentData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/sterilization-percent-by-age/${animal}`
      );
      const result = await response.json();
      if (result.data) {
        setData(result.data);
      }
    } catch (error) {
      console.error("Erreur API Sterilization Percent Data :", error);
    }
  };

  // Nouvelle fonction pour r√©cup√©rer les donn√©es des top races
  const fetchTopBreedsData = async (animal, setData) => {
    try {
      const response = await fetch(
        `http://localhost:8000/top-breeds-adoption/${animal}`
      );
      const result = await response.json();
      if (result.bar_data) {
        setData(result.bar_data);
      }
    } catch (error) {
      console.error("Erreur API Top Breeds :", error);
    }
  };

  // Chargement des donn√©es au montage du composant
  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      await Promise.all([
        fetchStackedBarData(1, setStackedDataDog),
        fetchStackedBarData(2, setStackedDataCat),
        fetchSterilizationData(1, setSterilizationDataDog),
        fetchSterilizationData(2, setSterilizationDataCat),
        fetchSterilizationPercentData(1, setSterilizationPercentDataDog),
        fetchSterilizationPercentData(2, setSterilizationPercentDataCat),
        fetchTopBreedsData(1, setTopBreedsDataDog), // Ajout pour chiens
        fetchTopBreedsData(2, setTopBreedsDataCat), // Ajout pour chats
      ]);
      setLoading(false);
    };
    loadData();
  }, []);

  const renderLabel = (value) => value;

  // S√©lection des donn√©es en fonction des filtres
  const sterilizationData =
    sterilizationAnimal === "dog" ? sterilizationDataDog : sterilizationDataCat;
  const sterilizationPercentData =
    sterilizationAnimal === "dog"
      ? sterilizationPercentDataDog
      : sterilizationPercentDataCat;

  return (
    <div className="">
      <>
        {/* Graphique 2 : St√©rilisation */}
        <div className="">
          <Title
            text="Analyse de la st√©rilisation des animaux selon le sexe et l'√¢ge"
            number={4}
          />

          {/* Boutons de filtre */}
          <div className="flex justify-end">
            <div className="mb-8 flex space-x-3">
              <button
                className="btn"
                onClick={() => setSterilizationAnimal("dog")}
              >
                üê∂ Chiens
              </button>
              <button
                className="btn"
                onClick={() => setSterilizationAnimal("cat")}
              >
                üê± Chats
              </button>
            </div>
          </div>

          {/* Grille des graphiques */}
          <div className=" flex ">
            {/* Graphique 1 - Nombre total */}
            <div className="w-1/2">
              <div className="flex items-center text-lg">
                <input
                  type="checkbox"
                  className="checkbox checkbox-primary"
                  checked={showNonSterilized}
                  onChange={() => setShowNonSterilized(!showNonSterilized)}
                />

                <span className="ml-2">
                  {" "}
                  Afficher les animaux non st√©rilis√©s
                </span>
              </div>

              <div className="">
                <Plot
                  data={[
                    {
                      x: sterilizationData.map((d) => d.Gender),
                      y: sterilizationData.map((d) => d.Sterilized_Yes),
                      type: "bar",
                      name: "St√©rilis√© - Oui (1)",
                      marker: { color: "#4CAF50" },
                      width: 0.6,
                    },
                    ...(showNonSterilized
                      ? [
                          {
                            x: sterilizationData.map((d) => d.Gender),
                            y: sterilizationData.map((d) => d.Sterilized_No),
                            type: "bar",
                            name: "St√©rilis√© - Non (2)",
                            marker: { color: "#F44336" },
                            width: 0.6,
                          },
                        ]
                      : []),
                  ]}
                  layout={{
                    height: 500,
                    xaxis: {
                      title: { text: "Sexe", font: { size: 16 } },
                      tickfont: { size: 14 },
                    },
                    yaxis: {
                      title: { text: "Nombre d'animaux", font: { size: 16 } },
                      tickfont: { size: 14 },
                    },
                    barmode: "group",
                    legend: {
                      font: { size: 14 },
                      orientation: "h",
                      y: 1.1,
                    },
                  }}
                  config={{
                    responsive: true,
                    displayModeBar: true,
                    displaylogo: false,
                  }}
                />
              </div>
            </div>

            {/* Graphique 2 - Pourcentage par √¢ge */}
            <div className="w-1/2">
              <div className="mb-6 flex space-x-8">
                <div className="flex items-center text-lg">
                  <input
                    type="checkbox"
                    className="checkbox checkbox-primary"
                    checked={showMalesSterilization}
                    onChange={() =>
                      setShowMalesSterilization(!showMalesSterilization)
                    }
                  />

                  <span className="ml-2">Afficher les m√¢les</span>
                </div>

                <div className="flex items-center text-lg">
                  <input
                    type="checkbox"
                    className="checkbox checkbox-primary"
                    checked={showFemalesSterilization}
                    onChange={() =>
                      setShowFemalesSterilization(!showFemalesSterilization)
                    }
                  />

                  <span className="ml-2">Afficher les femelles</span>
                </div>
              </div>
              <div className="w-full h-[500px]">
                <Plot
                  data={[
                    ...(showMalesSterilization
                      ? [
                          {
                            x: sterilizationPercentData.map((d) => d.Age),
                            y: sterilizationPercentData.map(
                              (d) => d.Male_Sterilization_Percent
                            ),
                            type: "scatter",
                            mode: "lines+markers",
                            name: "Sexe - M√¢le (1)",
                            line: { color: "#2196F3", width: 3 },
                            marker: { size: 10, color: "#2196F3" },
                          },
                        ]
                      : []),
                    ...(showFemalesSterilization
                      ? [
                          {
                            x: sterilizationPercentData.map((d) => d.Age),
                            y: sterilizationPercentData.map(
                              (d) => d.Female_Sterilization_Percent
                            ),
                            type: "scatter",
                            mode: "lines+markers",
                            name: "Sexe - Femelle (2)",
                            line: { color: "#FF9800", width: 3 },
                            marker: { size: 10, color: "#FF9800" },
                          },
                        ]
                      : []),
                  ]}
                  layout={{
                    height: 500,
                    xaxis: {
                      title: { text: "√Çge", font: { size: 16 } },
                      tickfont: { size: 14 },
                    },
                    yaxis: {
                      title: {
                        text: "Pourcentage de st√©rilisation (%)",
                        font: { size: 16 },
                      },
                      tickfont: { size: 14 },
                      range: [0, 100],
                    },
                    legend: {
                      font: { size: 14 },
                      orientation: "h",
                      y: 1.1,
                    },
                    hovermode: "closest",
                  }}
                  config={{
                    responsive: true,
                    displayModeBar: true,
                    displaylogo: false,
                  }}
                />
              </div>
            </div>
          </div>
        </div>

        <Contexte texte="Les graphiques pr√©sentent des donn√©es sur la st√©rilisation des animaux (chiens et chats), diff√©renci√©es selon le sexe et l'√¢ge. L'objectif est de comprendre les tendances g√©n√©rales de st√©rilisation et d'identifier d'√©ventuelles diff√©rences entre les groupes." />

        <Explication
          title="1. St√©rilisation chez les chiens"
          points={[
            "Le premier graphique montre le nombre total d'animaux st√©rilis√©s ou non, selon le sexe.",
            "Pr√©dominance des non-st√©rilis√©s : Les animaux non st√©rilis√©s (barres rouges) sont plus nombreux que les st√©rilis√©s (barres vertes).",
            "R√©partition par sexe : Les femelles semblent plus nombreuses que les m√¢les, et le groupe mixte est minoritaire.",
            "Le deuxi√®me graphique illustre le pourcentage de st√©rilisation par √¢ge et par sexe.",
            "Corr√©lation avec l'√¢ge : Le taux de st√©rilisation augmente significativement avec l'√¢ge (jeunes rarement st√©rilis√©s vs adultes/seniors).",
            "Diff√©rence entre sexes : La tendance est plus marqu√©e chez les femelles, refl√©tant une plus forte incitation √† leur st√©rilisation.",
          ]}
        />

        <Explication
          title="2. St√©rilisation chez les chats"
          points={[
            "Comme chez les chiens, les non-st√©rilis√©s sont majoritaires.",
            "√âquilibre entre sexes : La diff√©rence est moins marqu√©e que chez les chiens, sugg√©rant une approche plus √©quilibr√©e.",
            "Augmentation similaire √† celle observ√©e chez les chiens, mais taux plus √©lev√© chez les adultes.",
            "Chez les seniors, la diff√©rence entre m√¢les et femelles est moins prononc√©e que chez les chiens.",
          ]}
        />

        {/* Section Comparaison entre chiens et chats */}
        <Explication
          title="Comparaison entre chiens et chats"
          points={[
            "les chien sont  plus st√©rilis√©s que les chats",
            "Priorit√© aux femelles : La st√©rilisation des chiennes semble plus cibl√©e que celle des m√¢les.",
            "Jeunes rarement st√©rilis√©s : Constat commun aux deux esp√®ces.",
            "Chez les chiens : La st√©rilisation progresse de mani√®re graduelle et constante.",
            "Chez les chats : Le taux de st√©rilisation augmente rapidement, atteignant des niveaux √©lev√©s plus t√¥t.",
          ]}
        />

        <Conclusions
          conclusions={[
            "Ces analyses mettent en lumi√®re des tendances et des √©carts qui pourraient √™tre optimis√©s par des campagnes de sensibilisation et des politiques de st√©rilisation adapt√©es √† chaque esp√®ce et groupe d'√¢ge.",
          ]}
        />
      </>
    </div>
  );
};

export default Anna7;
